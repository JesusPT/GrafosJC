/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUIGrafos;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Ellipse2D;
import grafos.*;
import java.util.Random;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.border.Border;

/**
 *
 * @author J. P. Toledo
 */
public class winPrincipal extends javax.swing.JFrame {
    
    grafo graf;
    Random rand = new Random();
    listaGrafos listaGraf = new listaGrafos();
    
    Graphics2D g2d;
    
    Nodo actualDrag;
    Nodo actual;
    Nodo nodoEnlaceInicio;
    Nodo nodoInfo = null;
    
    boolean banDrag = false;
    boolean dirigido = false;
    boolean peso = false;
    boolean heuristica = false;
    
    DefaultListModel lista = new DefaultListModel();
    DefaultListModel listaG = new DefaultListModel();
    
    int f;
    int i;
    int iG = 1;
    
    /**
     * Creates new form winPrincipal
     */
    public winPrincipal() {
        initComponents();
        listaGraf.agregarGrafo(new grafo("Grafo" + iG));
        iG++;
        graf = listaGraf.grafos.get(0);
        Grafos.setSize(300, 321);
        infoNodo.setSize(500, 330);
        Grafos.setModal(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        infoNodo = new javax.swing.JDialog();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        slideR = new javax.swing.JSlider();
        jLabel7 = new javax.swing.JLabel();
        slideG = new javax.swing.JSlider();
        jLabel8 = new javax.swing.JLabel();
        slideB = new javax.swing.JSlider();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaAdyacencia = new javax.swing.JList<String>();
        btoCambios = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        nombreNodo = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtPeso = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtHeuristica = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtInfo = new javax.swing.JTextField();
        vistaColor = new javax.swing.JPanel();
        Grafos = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        chkPeso = new javax.swing.JCheckBox();
        chkDirigido = new javax.swing.JCheckBox();
        chkHeuristica = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        listG = new javax.swing.JList<String>();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        BtnEliminar = new javax.swing.JButton();
        grafoArea = new javax.swing.JPanel();

        infoNodo.setName("ventanaNodo"); // NOI18N
        infoNodo.setResizable(false);

        jLabel6.setText("Rojo");

        slideR.setMaximum(255);
        slideR.setValue(0);
        slideR.setName(""); // NOI18N
        slideR.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slideRStateChanged(evt);
            }
        });

        jLabel7.setText("Verde");

        slideG.setMaximum(255);
        slideG.setValue(0);
        slideG.setName(""); // NOI18N
        slideG.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slideGStateChanged(evt);
            }
        });

        jLabel8.setText("Azul");

        slideB.setMaximum(255);
        slideB.setValue(0);
        slideB.setName(""); // NOI18N
        slideB.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                slideBStateChanged(evt);
            }
        });

        listaAdyacencia.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listaAdyacenciaValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listaAdyacencia);

        btoCambios.setText("Aceptar");
        btoCambios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btoCambiosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(slideR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(slideG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(slideB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                    .addComponent(btoCambios, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(slideR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(slideG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(slideB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 22, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btoCambios, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        nombreNodo.setFont(new java.awt.Font("Arial Black", 0, 24)); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(183, Short.MAX_VALUE)
                .addComponent(nombreNodo, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(160, 160, 160))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(nombreNodo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jLabel1.setText("Color");

        jLabel3.setText("Peso");

        txtPeso.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtPesoCaretUpdate(evt);
            }
        });
        txtPeso.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                txtPesoInputMethodTextChanged(evt);
            }
        });

        jLabel4.setText("Heuristica");

        txtHeuristica.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                txtHeuristicaCaretUpdate(evt);
            }
        });

        jLabel5.setText("Informacion");

        javax.swing.GroupLayout vistaColorLayout = new javax.swing.GroupLayout(vistaColor);
        vistaColor.setLayout(vistaColorLayout);
        vistaColorLayout.setHorizontalGroup(
            vistaColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        vistaColorLayout.setVerticalGroup(
            vistaColorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 38, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPeso)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(txtHeuristica, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                            .addComponent(jLabel5)
                            .addComponent(txtInfo))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(vistaColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vistaColor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPeso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtHeuristica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout infoNodoLayout = new javax.swing.GroupLayout(infoNodo.getContentPane());
        infoNodo.getContentPane().setLayout(infoNodoLayout);
        infoNodoLayout.setHorizontalGroup(
            infoNodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, infoNodoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(infoNodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(infoNodoLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(94, 94, 94))
        );
        infoNodoLayout.setVerticalGroup(
            infoNodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(infoNodoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(infoNodoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(infoNodoLayout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(infoNodoLayout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setText("Grafos");

        jButton7.setText("Nuevo");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        chkPeso.setText("Peso");

        chkDirigido.setText("Dirigido");
        chkDirigido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDirigidoActionPerformed(evt);
            }
        });

        chkHeuristica.setText("Heuristica");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkDirigido)
                    .addComponent(chkPeso)
                    .addComponent(jButton7)
                    .addComponent(chkHeuristica))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton7)
                .addGap(26, 26, 26)
                .addComponent(chkDirigido)
                .addGap(18, 18, 18)
                .addComponent(chkPeso)
                .addGap(18, 18, 18)
                .addComponent(chkHeuristica)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        listG.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listGValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listG);

        javax.swing.GroupLayout GrafosLayout = new javax.swing.GroupLayout(Grafos.getContentPane());
        Grafos.getContentPane().setLayout(GrafosLayout);
        GrafosLayout.setHorizontalGroup(
            GrafosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(GrafosLayout.createSequentialGroup()
                .addContainerGap(165, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(158, 158, 158))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GrafosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        GrafosLayout.setVerticalGroup(
            GrafosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, GrafosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(42, 42, 42)
                .addGroup(GrafosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jButton1.setText("Grafos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Recorridos");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Busqueda");

        jButton4.setText("Nodo");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Enlace");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        BtnEliminar.setText("Eliminar");
        BtnEliminar.setName(""); // NOI18N
        BtnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnEliminarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(BtnEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4)
                .addGap(4, 4, 4)
                .addComponent(BtnEliminar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addContainerGap(172, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );

        grafoArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                grafoAreaMouseReleased(evt);
            }
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                grafoAreaMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                grafoAreaMousePressed(evt);
            }
        });
        grafoArea.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                grafoAreaMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout grafoAreaLayout = new javax.swing.GroupLayout(grafoArea);
        grafoArea.setLayout(grafoAreaLayout);
        grafoAreaLayout.setHorizontalGroup(
            grafoAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 451, Short.MAX_VALUE)
        );
        grafoAreaLayout.setVerticalGroup(
            grafoAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(grafoArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(grafoArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        listaG.clear();
        llenarModeloGrafos();
        listG.setModel(listaG);
        Grafos.setVisible(true);
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        //Contador de nodos
        i++;
        //agregar nodo
        graf.agregarEstado(new Nodo("Mi Nodo " + i, 0, 0, "Nodo"+i,new Color(rand.nextInt(255)+1, rand.nextInt(255)+1, rand.nextInt(255)+1)));
        
        dibujaGrafo(grafoArea.getGraphics());
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void grafoAreaMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grafoAreaMouseDragged
        
        if(banDrag){
            int x = evt.getX() - (int)actualDrag.GUINodo.getWidth() / 2;
            int y = evt.getY() - (int)actualDrag.GUINodo.getHeight() / 2;
            //System.out.println(" x :" + x + " Height :" +grafoArea.getHeight() );
            //System.out.println(" y :" + y + " Width :" +grafoArea.getWidth());
            if (x > 394) {
                x = 394;
            }else if(x < 1){
                x = 1;
            }
            
            if (y > 342) {
                y = 342;
            }else if(y < 1){
                y = 1;
            }
            
            actualDrag.GUINodo = new Ellipse2D.Float(x , y , 50f, 50f);   
            dibujaGrafo(grafoArea.getGraphics());
            //System.out.println(actualDrag.getNombre());
        }
        
        
    }//GEN-LAST:event_grafoAreaMouseDragged

    private void grafoAreaMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grafoAreaMousePressed
        actual = graf.inicio;
        if(evt.getButton() == 1){
            while(actual != null){
                if (actual.GUINodo.contains(evt.getX(),evt.getY())) {        
                    //System.out.println(actual.getNombre());
                    actualDrag = actual;
                    banDrag = true;
                    actual = null;
                }else{
                    actual = actual.Sigui;
                }

            }
        }else if( evt.getButton() == 3){
            while(actual != null){
                if (actual.GUINodo.contains(evt.getX(),evt.getY())) {        
                    //System.out.println(actual.getNombre());
                    nodoEnlaceInicio = actual;
                    actual = null;
                }else{
                    actual = actual.Sigui;
                }

            }
        }
        
    }//GEN-LAST:event_grafoAreaMousePressed

    private void grafoAreaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grafoAreaMouseReleased
        actualDrag = null;
        banDrag = false;
        actual = graf.inicio;
        if(evt.getButton() == 3){
            while(actual != null){
                if (actual.GUINodo.contains(evt.getX(),evt.getY())) {        
                    //System.out.println(actual.getNombre());
                    if(actual != nodoEnlaceInicio){
                        if(nodoEnlaceInicio.ListaAdy == null){
                            if (!dirigido) {
                                graf.enlace(nodoEnlaceInicio, actual);
                                graf.enlace(actual,nodoEnlaceInicio);
                            }else{
                                graf.enlace(nodoEnlaceInicio, actual);
                            }
                            
                        }else if(!nodoEnlaceInicio.ListaAdy.existe(actual.getNombre())){
                            if (!dirigido) {
                                graf.enlace(nodoEnlaceInicio, actual);
                                graf.enlace(actual,nodoEnlaceInicio);
                            }else{
                                graf.enlace(nodoEnlaceInicio, actual);
                            }
                        }
                        
                        dibujaGrafo(grafoArea.getGraphics());
                    }
                    actual = null;
                }else{
                    actual = actual.Sigui;
                }

            }
        }
        
    }//GEN-LAST:event_grafoAreaMouseReleased

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

    }//GEN-LAST:event_jButton5ActionPerformed
    

    //********************VETANA EMERGENTE INFO NODO***********************
    private void grafoAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_grafoAreaMouseClicked
        if(evt.getClickCount()==1){
            actual = graf.inicio;
            while(actual != null){
                if (actual.GUINodo.contains(evt.getX(),evt.getY())) {
                    //System.out.println("Se selecciono: "+actual.getNombre());
                    nodoInfo = actual;
                    actual = null;
                }else{
                    actual = actual.Sigui;
                }
            }
        }
        if(evt.getClickCount() == 2){
            actual = graf.inicio;
            while(actual != null){
                if (actual.GUINodo.contains(evt.getX(),evt.getY())) {
                    System.out.println(actual.getNombre());
                    nodoInfo = actual;
                    actual = null;
                }else{
                    actual = actual.Sigui;
                }

            }
            if (nodoInfo != null) {
                //llenar la lista de adyacencia
                lista.clear();
                llenarModelo(nodoInfo);
                listaAdyacencia.setModel(lista);
                listaAdyacencia.setSelectedIndex(0);
                
                // informacion del nodo
                llenarInfo(nodoInfo);
                
                //Color
                colorNodoInfo(nodoInfo);
                
                //inicializar la ventana y mostrarla
                nombreNodo.setText(nodoInfo.getNombre());
                infoNodo.setVisible(true);
            }
        }
    }//GEN-LAST:event_grafoAreaMouseClicked
    //efectuar cambios realizados en la ventana de informacion del nodo
    private void btoCambiosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btoCambiosActionPerformed
        nodoInfo.setColor(new Color(slideR.getValue(),slideG.getValue(),slideB.getValue()));
        nodoInfo.setInfo(txtInfo.getText());
        dibujaGrafo(grafoArea.getGraphics());
        infoNodo.dispose();
    }//GEN-LAST:event_btoCambiosActionPerformed

    private void slideRStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slideRStateChanged
        vistaColor.setBackground(new Color(slideR.getValue(),vistaColor.getBackground().getGreen(),vistaColor.getBackground().getBlue()));
    }//GEN-LAST:event_slideRStateChanged

    private void slideGStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slideGStateChanged
        vistaColor.setBackground(new Color(vistaColor.getBackground().getRed(),slideG.getValue(),vistaColor.getBackground().getBlue()));
    }//GEN-LAST:event_slideGStateChanged

    private void slideBStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_slideBStateChanged
        vistaColor.setBackground(new Color(vistaColor.getBackground().getRed(),vistaColor.getBackground().getGreen(),slideB.getValue()));
    }//GEN-LAST:event_slideBStateChanged
    

    //Cambio de elemento seleccionado de la lista de adyacencia
    private void listaAdyacenciaValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listaAdyacenciaValueChanged
        
        try{
            //System.out.println(nodoInfo.ListaAdy.existe(listaAdyacencia.getSelectedValue()));
            //System.out.println(listaAdyacencia.getSelectedValue());
            /*
            if (evt.getValueIsAdjusting()) {
                nodoInfo.ListaAdy.getNodo(listaAdyacencia.getSelectedValue()).setPeso(Integer.parseInt(txtPeso.getText()));
                System.out.println("Escribo " + txtPeso.getText() + " a " + listaAdyacencia.getSelectedValue());
            }
            */
            if(!evt.getValueIsAdjusting()){
                txtHeuristica.setEditable(true);
                txtPeso.setEditable(true);
                txtHeuristica.setText(String.valueOf(nodoInfo.ListaAdy.getNodo(listaAdyacencia.getSelectedValue()).getHeuristica()));
                txtPeso.setText(String.valueOf(nodoInfo.ListaAdy.getNodo(listaAdyacencia.getSelectedValue()).getPeso()));
            }
            
            
            
            
        }catch(NullPointerException e){
            
        }
        
    }//GEN-LAST:event_listaAdyacenciaValueChanged

    private void txtPesoInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_txtPesoInputMethodTextChanged
        
    }//GEN-LAST:event_txtPesoInputMethodTextChanged

    private void txtPesoCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtPesoCaretUpdate
        if(peso){
            try{
                int val = Integer.parseInt(txtPeso.getText());
                txtPeso.setBorder(BorderFactory.createLineBorder(new Color(0x8D8E8F)));
                nodoInfo.ListaAdy.getNodo(listaAdyacencia.getSelectedValue()).setPeso(Integer.parseInt(txtPeso.getText()));
                System.out.println("Escribo " + txtPeso.getText() + " a " + listaAdyacencia.getSelectedValue());
            }catch(NumberFormatException e){
                txtPeso.setBorder(BorderFactory.createLineBorder(Color.red));
            }
        }    
        
        
    }//GEN-LAST:event_txtPesoCaretUpdate

    private void txtHeuristicaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_txtHeuristicaCaretUpdate
        
        if(heuristica){
            try{
                int val = Integer.parseInt(txtHeuristica.getText());
                txtHeuristica.setBorder(BorderFactory.createLineBorder(new Color(0x8D8E8F)));
                nodoInfo.ListaAdy.getNodo(listaAdyacencia.getSelectedValue()).setHeuristica(Integer.parseInt(txtHeuristica.getText()));
                System.out.println("Escribo " + txtHeuristica.getText() + " a " + listaAdyacencia.getSelectedValue());
            }catch(NumberFormatException e){
                txtHeuristica.setBorder(BorderFactory.createLineBorder(Color.red));
            }
        }
    }//GEN-LAST:event_txtHeuristicaCaretUpdate

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

            listaGraf.agregarGrafo(new grafo("Grafo" + iG, chkDirigido.isSelected(), chkPeso.isSelected(), chkHeuristica.isSelected()));
            iG++;
            listaG.clear();
            llenarModeloGrafos();
            listG.setModel(listaG);
        
        
    }//GEN-LAST:event_jButton7ActionPerformed

    private void chkDirigidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDirigidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkDirigidoActionPerformed

    private void listGValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listGValueChanged
        if (evt.getValueIsAdjusting()) {
            System.out.println(listG.getSelectedIndex());
            int sel = listG.getSelectedIndex();
            graf = listaGraf.grafos.get(sel);
            dirigido = graf.getDirigido();
            peso = graf.getPeso();
            heuristica = graf.getHeuristica();
            i = graf.getI();
            
            dibujaGrafo(grafoArea.getGraphics());
        }
        
    }//GEN-LAST:event_listGValueChanged

    private void BtnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnEliminarActionPerformed

     if(!(nodoInfo==null)){
         //System.out.println("Se va a eliminar:"+nodoInfo.getNombre());
         try{
             if(nodoInfo.ListaAdy!=null){
                Nodo puntero = nodoInfo.ListaAdy.Inicio;
                while(puntero != null){
                    System.out.println("Adyacente: "+puntero.getNombre());
                    graf.estado(puntero.getNombre()).ListaAdy.removerNodo(nodoInfo.getNombre());
                    System.out.println("Lista despues de eliminar :");
                    graf.elementosLista(puntero.getNombre());
                    puntero = puntero.SiguiList;
                }
                nodoInfo.ListaAdy = null;  
             }
             graf.eliminarEstado(nodoInfo);
        }catch(NullPointerException e){
            lista.addElement("Lista vacia");
        }
     }else
     {
         JOptionPane.showMessageDialog(this, "No has seleccionado ningún grafo");
     }
     dibujaGrafo(grafoArea.getGraphics());
    }//GEN-LAST:event_BtnEliminarActionPerformed
    
    @Override
    public void paint(Graphics g){
        super.paint(g);
        dibujaGrafo(grafoArea.getGraphics());
    }
    
    
    //Repintat el Grafo
    public void dibujaGrafo(Graphics g){
        
        grafoArea.paint(g);
        g2d = (Graphics2D) g;
        //g2d.fill(rect);
        Nodo actual = graf.inicio;
        
        /*while(actual != null){
            if(actual.ListaAdy != null){
                listAdy lista = actual.ListaAdy;
                Nodo estadoLista = lista.Inicio;
                int x = (int) (actual.GUINodo.getX() + 25);
                int y = (int) (actual.GUINodo.getY() + 25);
                while(estadoLista != null){
                    int xf = (int) estadoLista.GUINodo.getX() + 25;
                    int yf = (int) estadoLista.GUINodo.getY() + 25;
                    
                    g2d.drawLine(x, y, xf, yf);
                    
                    estadoLista = estadoLista.SiguiList;
                }
            }
            actual = actual.Sigui;
        }*/
        
        
        while(actual != null){
            try{
            Nodo listEstado = actual.ListaAdy.Inicio;
            while(listEstado != null){
                int x = (int) (actual.GUINodo.getX() + 25);
                int y = (int) (actual.GUINodo.getY() + 25);
                int xf = (int) graf.estado(listEstado.getNombre()).GUINodo.getX() + 25;
                int yf = (int) graf.estado(listEstado.getNombre()).GUINodo.getY() + 25;

                g2d.drawLine(x, y, xf, yf);

                listEstado = listEstado.SiguiList;
            }
            }catch(NullPointerException e){
            
            }
            actual = actual.Sigui;
        }
                 
        
        actual = graf.inicio;
        while(actual != null){
            g2d.setColor(actual.getColor());
            g2d.fill(actual.GUINodo);
            g2d.setColor(Color.BLACK);
            //System.out.println(actual.getNombre().substring(4,actual.getNombre().length()));
            g2d.drawString(actual.getNombre().substring(4,actual.getNombre().length()), (int)actual.GUINodo.getCenterX() - 4, (int)actual.GUINodo.getCenterY() + 4);
            actual = actual.Sigui;
        }
        
        
    }
    
    //metodo para crear el modelo de la lista con el nodo correspodiente
    void llenarModelo(Nodo nLista){
        try{
            Nodo puntero = nLista.ListaAdy.Inicio;

            while(puntero != null){
                lista.addElement(puntero.getNombre());
                puntero = puntero.SiguiList;
            }
            listaAdyacencia.setEnabled(true);
        }catch(NullPointerException e){
            lista.addElement("Lista vacia");
            listaAdyacencia.setEnabled(false);
        }
        
    }
    
    void llenarModeloGrafos(){
        for (int j = 0; j < listaGraf.grafos.size(); j++) {
            listaG.addElement(listaGraf.grafos.get(j).getNombre());
        }
    }
    
    //llenar la ventana de la informacion de nodo
    private void llenarInfo(Nodo infoNodo) {
        
        //Peso y heuristica vienen del nodo que este seleccionado en la lista
        //El valor inicial es el del primer elemento de la lista
        if(peso && heuristica){
            try{
                txtHeuristica.setEditable(true);
                txtPeso.setEditable(true);
                txtHeuristica.setText(String.valueOf(infoNodo.ListaAdy.Inicio.getHeuristica()));
                txtPeso.setText(String.valueOf(infoNodo.ListaAdy.Inicio.getPeso()));
            }catch(NullPointerException e){
                txtHeuristica.setEditable(false);
                txtPeso.setEditable(false);
                txtHeuristica.setText("-");
                txtPeso.setText("-");
            }
        }else if(peso){
            txtHeuristica.setEditable(false);
            txtHeuristica.setText("-");
            try{
                txtPeso.setEditable(true);
                txtPeso.setText(String.valueOf(infoNodo.ListaAdy.Inicio.getPeso()));
            }catch(NullPointerException e){
                txtPeso.setEditable(false);
                txtPeso.setText("-");
            }
        }else if(heuristica){
            txtPeso.setEditable(false);
            txtPeso.setText("-");
            try{
                txtHeuristica.setEditable(true);
                txtHeuristica.setText(String.valueOf(infoNodo.ListaAdy.Inicio.getHeuristica()));
            }catch(NullPointerException e){
                txtHeuristica.setEditable(false);
                txtHeuristica.setText("-");
            }
        }else{
            txtPeso.setEditable(false);
            txtPeso.setText("-");
            txtPeso.setBorder(BorderFactory.createLineBorder(Color.BLACK));
            txtHeuristica.setEditable(false);
            txtHeuristica.setText("-");
            txtHeuristica.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        }
        
        
        txtInfo.setText(infoNodo.getInfo());
    }
    
    //Cambio de color del infoNodo actual
    private void colorNodoInfo(Nodo infoNodo){
        Color colorInfo = infoNodo.getColor();
        
        slideR.setValue(colorInfo.getRed());
        slideG.setValue(colorInfo.getGreen());
        slideB.setValue(colorInfo.getBlue());
        
        vistaColor.setBackground(colorInfo);
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(winPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(winPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(winPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(winPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new winPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnEliminar;
    private javax.swing.JDialog Grafos;
    private javax.swing.JButton btoCambios;
    private javax.swing.JCheckBox chkDirigido;
    private javax.swing.JCheckBox chkHeuristica;
    private javax.swing.JCheckBox chkPeso;
    private javax.swing.JPanel grafoArea;
    private javax.swing.JDialog infoNodo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listG;
    private javax.swing.JList<String> listaAdyacencia;
    private javax.swing.JLabel nombreNodo;
    private javax.swing.JSlider slideB;
    private javax.swing.JSlider slideG;
    private javax.swing.JSlider slideR;
    private javax.swing.JTextField txtHeuristica;
    private javax.swing.JTextField txtInfo;
    private javax.swing.JTextField txtPeso;
    private javax.swing.JPanel vistaColor;
    // End of variables declaration//GEN-END:variables

    
}
